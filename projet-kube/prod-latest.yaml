#serveur web localhost:8080

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    app: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: karimynov/web:latest
        resources:
          limits:
            memory: "1G"
            cpu: "1"
          requests:
            memory: "1G"
            cpu: "0.5"
        ports:
        - containerPort: 80
      restartPolicy: Always
      affinity:
       podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - identity-api
                - jobs-api
                - applicants-api
            topologyKey: "kubernetes.io/hostname"
            
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: web
  name: web-service
  namespace: default
spec:
  selector:
    app: web
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
  type: LoadBalancer
  
# ---

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
  # name: ingress-core
  # annotations:
    # kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
  # rules:
    # - http:
        # paths:
          # - path: /web
            # pathType: Prefix
            # backend:
              # service:
                # name: service-web
                # port: 
                  # number: 80
 

---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql
  labels:
    app: mssql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mssql
  template:
    metadata:
      labels:
        app: mssql
    spec:
      containers:
      - name: mssql
        image: karimynov/sql.data:latest
        resources:
          limits:
            memory: "2G"
            cpu: "1"
          requests:
            memory: "1.5G"
            cpu: "0.5"
        env:
        - name: "SA_PASSWORD"
          value: "Pass@word"
        - name: "ACCEPT_EULA"
          value: "Y"
        ports:
        - containerPort: 1433
          name: mssql
      restartPolicy: Always    


---

apiVersion: v1
kind: Service
metadata:
  name: mssql-service
spec:
  selector:
    app: mssql
  ports:
    - port: 1433
      targetPort: 1433
  type: ClusterIP


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-api
  labels:
    app: identity-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: identity-api
  template:
    metadata:
      labels:
        app: identity-api
    spec:
      containers:
      - name: identity-api
        image: karimynov/identity.api:latest
        resources:
          limits:
            memory: "200Mi"
            cpu: "1"
          requests:
            memory: "100Mi"
            cpu: "0.5"
        env:
          - name: "RedisHost"
            value: "user-data-service.default.svc.cluster.local:6379"
        ports:
        - containerPort: 80
      restartPolicy: Always
      affinity:
       podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - user-data
            topologyKey: "kubernetes.io/hostname"
      
---

apiVersion: v1
kind: Service
metadata:
  name: identity-api-service
spec:
  selector:
    app: identity-api
  ports:
    - protocol: TCP
      port: 8084
      targetPort: 80
  type: ClusterIP



---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobs-api
  labels:
    app: jobs-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jobs-api
  template:
    metadata:
      labels:
        app: jobs-api
    spec:
      containers:
      - name: jobs-api-api
        image: karimynov/jobs.api:latest
        resources:
          limits:
            memory: "200Mi"
            cpu: "1"
          requests:
            memory: "100Mi"
            cpu: "0.5"
        env:
          - name: "ConnectionString"
            value: "Server=mssql-service.default.svc.cluster.local;User=sa;Password=Pass@word;Database=dotnetgigs.jobs;"
        ports:
        - containerPort: 80
      restartPolicy: Always
      affinity:
       podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - mssql
                - rabbitmq
            topologyKey: "kubernetes.io/hostname"
      
---

apiVersion: v1
kind: Service
metadata:
  name: jobs-api-service
spec:
  selector:
    app: jobs-api
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 80
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: applicants-api
  labels:
    app: applicants-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: applicants-api
  template:
    metadata:
      labels:
        app: applicants-api
    spec:
      containers:
      - name: applicants-api
        image: karimynov/applicants.api:latest
        resources:
          limits:
            memory: "200Mi"
            cpu: "1"
          requests:
            memory: "100Mi"
            cpu: "0.5"
        env:
          - name: "ConnectionString"
            value: "Server=mssql-service.default.svc.cluster.local;User=sa;Password=Pass@word;Database=dotnetgigs.applicants;"
        ports:
        - containerPort: 80
      restartPolicy: Always
      affinity:
       podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - mssql
                - rabbitmq
            topologyKey: "kubernetes.io/hostname"
      
---

apiVersion: v1
kind: Service
metadata:
  name: applicants-api-service
spec:
  selector:
    app: applicants-api
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 80
  type: ClusterIP
  
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        resources:
          limits:
            memory: "1G"
            cpu: "1"
          requests:
            memory: "500Mi"
            cpu: "0.5"
        ports:
        - containerPort: 15672
        - containerPort: 5672
      restartPolicy: Always
      
---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - name: rabbitmq1
      protocol: TCP
      port: 15672
      targetPort: 15672
    - name: rabbitmq0
      protocol: TCP
      port: 5672
      targetPort: 5672
  type: ClusterIP
  
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-data
  labels:
    app: user-data
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-data
  template:
    metadata:
      labels:
        app: user-data
    spec:
      containers:
      - name: user-data
        image: redis
        resources:
          limits:
            memory: "200Mi"
            cpu: "1"
          requests:
            memory: "100Mi"
            cpu: "0.5"
        ports:
        - containerPort: 6379
      restartPolicy: Always
      
---

apiVersion: v1
kind: Service
metadata:
  name: user-data-service
spec:
  selector:
    app: user-data
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
  